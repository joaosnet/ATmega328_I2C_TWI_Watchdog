
ATmega328_I2C_TWI_Watchdog.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000017c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000128  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001ac  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007ba  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ce  00000000  00000000  000009ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033b  00000000  00000000  000010bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  000013f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d7  00000000  00000000  0000146c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000007a  00000000  00000000  00001843  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  000018bd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 84 00 	call	0x108	; 0x108 <main>
  78:	0c 94 92 00 	jmp	0x124	; 0x124 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <USART_Init>:
#include <avr/io.h>
#include <avr/wdt.h>

// Configuração do USART
void USART_Init(unsigned int ubrr) {
    UBRR0H = (unsigned char)(ubrr>>8);
  80:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
    UBRR0L = (unsigned char)ubrr;
  84:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
    UCSR0B = (1<<RXEN0)|(1<<TXEN0);
  88:	88 e1       	ldi	r24, 0x18	; 24
  8a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
  8e:	86 e0       	ldi	r24, 0x06	; 6
  90:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  94:	08 95       	ret

00000096 <USART_Receive>:
}

// Leitura de dados do USART
unsigned char USART_Receive(void) {
    while (!(UCSR0A & (1<<RXC0)));
  96:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  9a:	88 23       	and	r24, r24
  9c:	e4 f7       	brge	.-8      	; 0x96 <USART_Receive>
    return UDR0;
  9e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
  a2:	08 95       	ret

000000a4 <I2C_Init>:

// Configuração do I2C/TWI
void I2C_Init(void) {
    TWSR = 0x00; // sem prescaler
  a4:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    TWBR = 0x46; // taxa de transmissão de 100 kHz
  a8:	86 e4       	ldi	r24, 0x46	; 70
  aa:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    TWCR = (1<<TWEN); // ative o TWI
  ae:	84 e0       	ldi	r24, 0x04	; 4
  b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  b4:	08 95       	ret

000000b6 <I2C_LCD_Send>:
}

// Envio de dados para o LCD via I2C/TWI
void I2C_LCD_Send(unsigned char data) {
    TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
  b6:	94 ea       	ldi	r25, 0xA4	; 164
  b8:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while (!(TWCR & (1<<TWINT)));
  bc:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  c0:	99 23       	and	r25, r25
  c2:	e4 f7       	brge	.-8      	; 0xbc <I2C_LCD_Send+0x6>
    TWDR = 0x3C;
  c4:	9c e3       	ldi	r25, 0x3C	; 60
  c6:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = (1<<TWINT)|(1<<TWEN);
  ca:	94 e8       	ldi	r25, 0x84	; 132
  cc:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while (!(TWCR & (1<<TWINT)));
  d0:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  d4:	99 23       	and	r25, r25
  d6:	e4 f7       	brge	.-8      	; 0xd0 <I2C_LCD_Send+0x1a>
    TWDR = data;
  d8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    TWCR = (1<<TWINT)|(1<<TWEN);
  dc:	84 e8       	ldi	r24, 0x84	; 132
  de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    while (!(TWCR & (1<<TWINT)));
  e2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  e6:	88 23       	and	r24, r24
  e8:	e4 f7       	brge	.-8      	; 0xe2 <I2C_LCD_Send+0x2c>
    TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
  ea:	84 e9       	ldi	r24, 0x94	; 148
  ec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  f0:	08 95       	ret

000000f2 <Watchdog_Init>:
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
  f2:	9e e0       	ldi	r25, 0x0E	; 14
  f4:	88 e1       	ldi	r24, 0x18	; 24
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	f8 94       	cli
  fa:	a8 95       	wdr
  fc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 100:	0f be       	out	0x3f, r0	; 63
 102:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7f8060>
 106:	08 95       	ret

00000108 <main>:
void Watchdog_Init(void) {
    wdt_enable(WDTO_1S); // ative o watchdog para resetar a cada 1 segundo
}

int main(void) {
    USART_Init(51); // para 9600 bps com oscilador de 8 MHz
 108:	83 e3       	ldi	r24, 0x33	; 51
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 40 00 	call	0x80	; 0x80 <USART_Init>
    I2C_Init();
 110:	0e 94 52 00 	call	0xa4	; 0xa4 <I2C_Init>
    Watchdog_Init();
 114:	0e 94 79 00 	call	0xf2	; 0xf2 <Watchdog_Init>

    while (1) {
        unsigned char data = USART_Receive();
 118:	0e 94 4b 00 	call	0x96	; 0x96 <USART_Receive>
        I2C_LCD_Send(data);
 11c:	0e 94 5b 00 	call	0xb6	; 0xb6 <I2C_LCD_Send>
        wdt_reset(); // resete o watchdog
 120:	a8 95       	wdr
 122:	fa cf       	rjmp	.-12     	; 0x118 <main+0x10>

00000124 <_exit>:
 124:	f8 94       	cli

00000126 <__stop_program>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <__stop_program>
