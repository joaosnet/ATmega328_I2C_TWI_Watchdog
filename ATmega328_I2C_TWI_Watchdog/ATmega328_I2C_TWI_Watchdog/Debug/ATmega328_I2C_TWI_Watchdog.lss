
ATmega328_I2C_TWI_Watchdog.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000012e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000001f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007f4  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ce  00000000  00000000  00000a50  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000322  00000000  00000000  0000111e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000b4  00000000  00000000  00001440  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003f3  00000000  00000000  000014f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000004b  00000000  00000000  000018e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000058  00000000  00000000  00001932  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 84 00 	call	0x108	; 0x108 <main>
  78:	0c 94 95 00 	jmp	0x12a	; 0x12a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <USART_Init>:
    while (!(TWCR & (1 << TWINT)));
    // Verifique o status aqui e retorne um código de erro, se necessário
    return 0;
}

void LCD_SendData(char data) {
  80:	82 e6       	ldi	r24, 0x62	; 98
  82:	91 e0       	ldi	r25, 0x01	; 1
  84:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  88:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  8c:	88 e1       	ldi	r24, 0x18	; 24
  8e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  92:	86 e0       	ldi	r24, 0x06	; 6
  94:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  98:	08 95       	ret

0000009a <USART_Receive>:
  9a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  9e:	88 23       	and	r24, r24
  a0:	e4 f7       	brge	.-8      	; 0x9a <USART_Receive>
  a2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  a6:	08 95       	ret

000000a8 <I2C_Init>:
  a8:	80 e2       	ldi	r24, 0x20	; 32
  aa:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
  ae:	08 95       	ret

000000b0 <I2C_Start>:
  b0:	84 ea       	ldi	r24, 0xA4	; 164
  b2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  b6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ba:	88 23       	and	r24, r24
  bc:	e4 f7       	brge	.-8      	; 0xb6 <I2C_Start+0x6>
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	08 95       	ret

000000c4 <I2C_Stop>:
  c4:	84 e9       	ldi	r24, 0x94	; 148
  c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ca:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ce:	84 fd       	sbrc	r24, 4
  d0:	fc cf       	rjmp	.-8      	; 0xca <I2C_Stop+0x6>
  d2:	08 95       	ret

000000d4 <I2C_Write>:
  d4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
  d8:	84 e8       	ldi	r24, 0x84	; 132
  da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  de:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  e2:	88 23       	and	r24, r24
  e4:	e4 f7       	brge	.-8      	; 0xde <I2C_Write+0xa>
  e6:	80 e0       	ldi	r24, 0x00	; 0
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	08 95       	ret

000000ec <Watchdog_Init>:
    // ...
}

void Watchdog_Init() {
    // Configuração do temporizador watchdog com timeout de 2 segundos
    WDTCSR = (1 << WDCE) | (1 << WDE);
  ec:	e0 e6       	ldi	r30, 0x60	; 96
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	88 e1       	ldi	r24, 0x18	; 24
  f2:	80 83       	st	Z, r24
    WDTCSR = (1 << WDE) | (1 << WDP2) | (1 << WDP1);
  f4:	8e e0       	ldi	r24, 0x0E	; 14
  f6:	80 83       	st	Z, r24
  f8:	08 95       	ret

000000fa <Init>:
}

void Init() {
    USART_Init();
  fa:	0e 94 40 00 	call	0x80	; 0x80 <USART_Init>
    I2C_Init();
  fe:	0e 94 54 00 	call	0xa8	; 0xa8 <I2C_Init>
    Watchdog_Init();
 102:	0e 94 76 00 	call	0xec	; 0xec <Watchdog_Init>
 106:	08 95       	ret

00000108 <main>:
}

int main() {
    Init();
 108:	0e 94 7d 00 	call	0xfa	; 0xfa <Init>

    sei(); // Habilita interrupções globais
 10c:	78 94       	sei

    while (1) {
        // Aguarda dados pela USART
        char receivedData = USART_Receive();
 10e:	0e 94 4d 00 	call	0x9a	; 0x9a <USART_Receive>
 112:	c8 2f       	mov	r28, r24

        // Envia dados para o display Nokia 3530 LCD usando I2C/TWI
        if (I2C_Start() == 0) {
 114:	0e 94 58 00 	call	0xb0	; 0xb0 <I2C_Start>
 118:	89 2b       	or	r24, r25
 11a:	29 f4       	brne	.+10     	; 0x126 <main+0x1e>
            if (I2C_Write(receivedData) != 0) {
 11c:	8c 2f       	mov	r24, r28
 11e:	0e 94 6a 00 	call	0xd4	; 0xd4 <I2C_Write>
                // Trate o erro aqui
            }
            I2C_Stop();
 122:	0e 94 62 00 	call	0xc4	; 0xc4 <I2C_Stop>
        } else {
            // Trate o erro aqui
        }

        // Alimenta o watchdog para evitar reinicialização
        asm volatile("wdr");
 126:	a8 95       	wdr
    }
 128:	f2 cf       	rjmp	.-28     	; 0x10e <main+0x6>

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
