
ATmega328_I2C_TWI_Watchdog.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000042a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003d6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000042a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000045c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  0000049c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000baf  00000000  00000000  00000524  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007f6  00000000  00000000  000010d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000625  00000000  00000000  000018c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  00001ef0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000478  00000000  00000000  00002010  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000002ca  00000000  00000000  00002488  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00002752  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <main>
  78:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <delay>:
 */
char i2c_read(){
    TWCR  = (1<<TWEN) | (1<<TWINT); // Habilita a comunicação I2C e limpa a interrupção
    while (!(TWCR & (1<<TWINT))); // Verifica se a leitura foi concluída com sucesso
    return TWDR; // Retorna o dado lido
}
  80:	40 e0       	ldi	r20, 0x00	; 0
  82:	50 e0       	ldi	r21, 0x00	; 0
  84:	0a c0       	rjmp	.+20     	; 0x9a <delay+0x1a>
  86:	2f 5f       	subi	r18, 0xFF	; 255
  88:	3f 4f       	sbci	r19, 0xFF	; 255
  8a:	02 c0       	rjmp	.+4      	; 0x90 <delay+0x10>
  8c:	20 e0       	ldi	r18, 0x00	; 0
  8e:	30 e0       	ldi	r19, 0x00	; 0
  90:	29 37       	cpi	r18, 0x79	; 121
  92:	31 05       	cpc	r19, r1
  94:	c4 f3       	brlt	.-16     	; 0x86 <delay+0x6>
  96:	4f 5f       	subi	r20, 0xFF	; 255
  98:	5f 4f       	sbci	r21, 0xFF	; 255
  9a:	84 17       	cp	r24, r20
  9c:	95 07       	cpc	r25, r21
  9e:	b4 f7       	brge	.-20     	; 0x8c <delay+0xc>
  a0:	08 95       	ret

000000a2 <toggle>:
  a2:	eb eb       	ldi	r30, 0xBB	; 187
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	80 83       	st	Z, r24
  ac:	84 e8       	ldi	r24, 0x84	; 132
  ae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  b2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  b6:	88 23       	and	r24, r24
  b8:	e4 f7       	brge	.-8      	; 0xb2 <toggle+0x10>
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 40 00 	call	0x80	; 0x80 <delay>
  c2:	eb eb       	ldi	r30, 0xBB	; 187
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	8d 7f       	andi	r24, 0xFD	; 253
  ca:	80 83       	st	Z, r24
  cc:	84 e8       	ldi	r24, 0x84	; 132
  ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  d2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  d6:	88 23       	and	r24, r24
  d8:	e4 f7       	brge	.-8      	; 0xd2 <toggle+0x30>
  da:	08 95       	ret

000000dc <lcd_cmd_hf>:
  dc:	eb eb       	ldi	r30, 0xBB	; 187
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	90 81       	ld	r25, Z
  e2:	9e 7f       	andi	r25, 0xFE	; 254
  e4:	90 83       	st	Z, r25
  e6:	94 e8       	ldi	r25, 0x84	; 132
  e8:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  ec:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  f0:	99 23       	and	r25, r25
  f2:	e4 f7       	brge	.-8      	; 0xec <lcd_cmd_hf+0x10>
  f4:	eb eb       	ldi	r30, 0xBB	; 187
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	90 81       	ld	r25, Z
  fa:	9f 70       	andi	r25, 0x0F	; 15
  fc:	90 83       	st	Z, r25
  fe:	94 e8       	ldi	r25, 0x84	; 132
 100:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 104:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 108:	99 23       	and	r25, r25
 10a:	e4 f7       	brge	.-8      	; 0x104 <lcd_cmd_hf+0x28>
 10c:	eb eb       	ldi	r30, 0xBB	; 187
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	90 81       	ld	r25, Z
 112:	80 7f       	andi	r24, 0xF0	; 240
 114:	89 2b       	or	r24, r25
 116:	80 83       	st	Z, r24
 118:	84 e8       	ldi	r24, 0x84	; 132
 11a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 11e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 122:	88 23       	and	r24, r24
 124:	e4 f7       	brge	.-8      	; 0x11e <lcd_cmd_hf+0x42>
 126:	0e 94 51 00 	call	0xa2	; 0xa2 <toggle>
 12a:	08 95       	ret

0000012c <lcd_cmd>:
 12c:	cf 93       	push	r28
 12e:	c8 2f       	mov	r28, r24
 130:	eb eb       	ldi	r30, 0xBB	; 187
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	8e 7f       	andi	r24, 0xFE	; 254
 138:	80 83       	st	Z, r24
 13a:	84 e8       	ldi	r24, 0x84	; 132
 13c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 140:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 144:	88 23       	and	r24, r24
 146:	e4 f7       	brge	.-8      	; 0x140 <lcd_cmd+0x14>
 148:	eb eb       	ldi	r30, 0xBB	; 187
 14a:	f0 e0       	ldi	r31, 0x00	; 0
 14c:	80 81       	ld	r24, Z
 14e:	8f 70       	andi	r24, 0x0F	; 15
 150:	80 83       	st	Z, r24
 152:	84 e8       	ldi	r24, 0x84	; 132
 154:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 158:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 15c:	88 23       	and	r24, r24
 15e:	e4 f7       	brge	.-8      	; 0x158 <lcd_cmd+0x2c>
 160:	eb eb       	ldi	r30, 0xBB	; 187
 162:	f0 e0       	ldi	r31, 0x00	; 0
 164:	80 81       	ld	r24, Z
 166:	9c 2f       	mov	r25, r28
 168:	90 7f       	andi	r25, 0xF0	; 240
 16a:	89 2b       	or	r24, r25
 16c:	80 83       	st	Z, r24
 16e:	84 e8       	ldi	r24, 0x84	; 132
 170:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 174:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 178:	88 23       	and	r24, r24
 17a:	e4 f7       	brge	.-8      	; 0x174 <lcd_cmd+0x48>
 17c:	0e 94 51 00 	call	0xa2	; 0xa2 <toggle>
 180:	eb eb       	ldi	r30, 0xBB	; 187
 182:	f0 e0       	ldi	r31, 0x00	; 0
 184:	80 81       	ld	r24, Z
 186:	8f 70       	andi	r24, 0x0F	; 15
 188:	80 83       	st	Z, r24
 18a:	84 e8       	ldi	r24, 0x84	; 132
 18c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 190:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 194:	88 23       	and	r24, r24
 196:	e4 f7       	brge	.-8      	; 0x190 <lcd_cmd+0x64>
 198:	eb eb       	ldi	r30, 0xBB	; 187
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	20 81       	ld	r18, Z
 19e:	30 e1       	ldi	r19, 0x10	; 16
 1a0:	c3 9f       	mul	r28, r19
 1a2:	c0 01       	movw	r24, r0
 1a4:	11 24       	eor	r1, r1
 1a6:	82 2b       	or	r24, r18
 1a8:	80 83       	st	Z, r24
 1aa:	84 e8       	ldi	r24, 0x84	; 132
 1ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1b0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1b4:	88 23       	and	r24, r24
 1b6:	e4 f7       	brge	.-8      	; 0x1b0 <lcd_cmd+0x84>
 1b8:	0e 94 51 00 	call	0xa2	; 0xa2 <toggle>
 1bc:	cf 91       	pop	r28
 1be:	08 95       	ret

000001c0 <lcd_dwr>:
 1c0:	cf 93       	push	r28
 1c2:	c8 2f       	mov	r28, r24
 1c4:	eb eb       	ldi	r30, 0xBB	; 187
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	81 60       	ori	r24, 0x01	; 1
 1cc:	80 83       	st	Z, r24
 1ce:	84 e8       	ldi	r24, 0x84	; 132
 1d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1d4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1d8:	88 23       	and	r24, r24
 1da:	e4 f7       	brge	.-8      	; 0x1d4 <lcd_dwr+0x14>
 1dc:	eb eb       	ldi	r30, 0xBB	; 187
 1de:	f0 e0       	ldi	r31, 0x00	; 0
 1e0:	80 81       	ld	r24, Z
 1e2:	8f 70       	andi	r24, 0x0F	; 15
 1e4:	80 83       	st	Z, r24
 1e6:	84 e8       	ldi	r24, 0x84	; 132
 1e8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1ec:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1f0:	88 23       	and	r24, r24
 1f2:	e4 f7       	brge	.-8      	; 0x1ec <lcd_dwr+0x2c>
 1f4:	eb eb       	ldi	r30, 0xBB	; 187
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	80 81       	ld	r24, Z
 1fa:	9c 2f       	mov	r25, r28
 1fc:	90 7f       	andi	r25, 0xF0	; 240
 1fe:	89 2b       	or	r24, r25
 200:	80 83       	st	Z, r24
 202:	84 e8       	ldi	r24, 0x84	; 132
 204:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 208:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 20c:	88 23       	and	r24, r24
 20e:	e4 f7       	brge	.-8      	; 0x208 <lcd_dwr+0x48>
 210:	0e 94 51 00 	call	0xa2	; 0xa2 <toggle>
 214:	eb eb       	ldi	r30, 0xBB	; 187
 216:	f0 e0       	ldi	r31, 0x00	; 0
 218:	80 81       	ld	r24, Z
 21a:	8f 70       	andi	r24, 0x0F	; 15
 21c:	80 83       	st	Z, r24
 21e:	84 e8       	ldi	r24, 0x84	; 132
 220:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 224:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 228:	88 23       	and	r24, r24
 22a:	e4 f7       	brge	.-8      	; 0x224 <lcd_dwr+0x64>
 22c:	eb eb       	ldi	r30, 0xBB	; 187
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	20 81       	ld	r18, Z
 232:	30 e1       	ldi	r19, 0x10	; 16
 234:	c3 9f       	mul	r28, r19
 236:	c0 01       	movw	r24, r0
 238:	11 24       	eor	r1, r1
 23a:	82 2b       	or	r24, r18
 23c:	80 83       	st	Z, r24
 23e:	84 e8       	ldi	r24, 0x84	; 132
 240:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 244:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 248:	88 23       	and	r24, r24
 24a:	e4 f7       	brge	.-8      	; 0x244 <lcd_dwr+0x84>
 24c:	0e 94 51 00 	call	0xa2	; 0xa2 <toggle>
 250:	cf 91       	pop	r28
 252:	08 95       	ret

00000254 <lcd_init>:
 254:	80 e3       	ldi	r24, 0x30	; 48
 256:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_cmd_hf>
 25a:	80 e3       	ldi	r24, 0x30	; 48
 25c:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_cmd_hf>
 260:	80 e2       	ldi	r24, 0x20	; 32
 262:	0e 94 6e 00 	call	0xdc	; 0xdc <lcd_cmd_hf>
 266:	88 e2       	ldi	r24, 0x28	; 40
 268:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_cmd>
 26c:	8c e0       	ldi	r24, 0x0C	; 12
 26e:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_cmd>
 272:	81 e0       	ldi	r24, 0x01	; 1
 274:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_cmd>
 278:	86 e0       	ldi	r24, 0x06	; 6
 27a:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_cmd>
 27e:	80 e8       	ldi	r24, 0x80	; 128
 280:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_cmd>
 284:	08 95       	ret

00000286 <lcd_msg>:
 286:	cf 93       	push	r28
 288:	df 93       	push	r29
 28a:	ec 01       	movw	r28, r24
 28c:	03 c0       	rjmp	.+6      	; 0x294 <lcd_msg+0xe>
 28e:	21 96       	adiw	r28, 0x01	; 1
 290:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_dwr>
 294:	88 81       	ld	r24, Y
 296:	81 11       	cpse	r24, r1
 298:	fa cf       	rjmp	.-12     	; 0x28e <lcd_msg+0x8>
 29a:	df 91       	pop	r29
 29c:	cf 91       	pop	r28
 29e:	08 95       	ret

000002a0 <i2c_init>:
 2a0:	82 e6       	ldi	r24, 0x62	; 98
 2a2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 2a6:	84 e0       	ldi	r24, 0x04	; 4
 2a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2ac:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
 2b0:	08 95       	ret

000002b2 <i2c_start>:
 2b2:	84 ea       	ldi	r24, 0xA4	; 164
 2b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2b8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2bc:	88 23       	and	r24, r24
 2be:	e4 f7       	brge	.-8      	; 0x2b8 <i2c_start+0x6>
 2c0:	08 95       	ret

000002c2 <i2c_write>:
 2c2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 2c6:	84 e8       	ldi	r24, 0x84	; 132
 2c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2cc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2d0:	88 23       	and	r24, r24
 2d2:	e4 f7       	brge	.-8      	; 0x2cc <i2c_write+0xa>
 2d4:	08 95       	ret

000002d6 <main>:
 * @brief Função principal do programa.
 * @return Retorna 0 ao final da execução.
 */

int main(void)
{
 2d6:	cf 93       	push	r28
 2d8:	df 93       	push	r29
 2da:	00 d0       	rcall	.+0      	; 0x2dc <main+0x6>
 2dc:	1f 92       	push	r1
 2de:	cd b7       	in	r28, 0x3d	; 61
 2e0:	de b7       	in	r29, 0x3e	; 62
	i2c_init(); // Inicializa a comunicação I2C
 2e2:	0e 94 50 01 	call	0x2a0	; 0x2a0 <i2c_init>
	i2c_start(); // Inicia a comunicação I2C
 2e6:	0e 94 59 01 	call	0x2b2	; 0x2b2 <i2c_start>
	i2c_write(0x70); // Escreve no endereço 0x70 do barramento I2C
 2ea:	80 e7       	ldi	r24, 0x70	; 112
 2ec:	0e 94 61 01 	call	0x2c2	; 0x2c2 <i2c_write>
	lcd_init(); // Inicializa o display LCD
 2f0:	0e 94 2a 01 	call	0x254	; 0x254 <lcd_init>

	cli(); // Desativa todas as interrupções
 2f4:	f8 94       	cli
	MCUSR &= ~(1<<WDRF); // Reseta o bit de Watchdog Reset
 2f6:	84 b7       	in	r24, 0x34	; 52
 2f8:	87 7f       	andi	r24, 0xF7	; 247
 2fa:	84 bf       	out	0x34, r24	; 52
	// Inicia a sequência de atualização do watchdog timer
	WDTCSR = (1<<WDCE) | (1<<WDE);
 2fc:	e0 e6       	ldi	r30, 0x60	; 96
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	88 e1       	ldi	r24, 0x18	; 24
 302:	80 83       	st	Z, r24
	// Define o tempo de espera para 2.0s e habilita a interrupção do watchdog timer
	WDTCSR = (1<<WDIE) | (1<<WDP2) | (1<<WDP1) | (1<<WDP0);
 304:	87 e4       	ldi	r24, 0x47	; 71
 306:	80 83       	st	Z, r24
	sei(); // Reativa todas as interrupções
 308:	78 94       	sei

	DDRB &=~ 0b11111110; // Configura o pino PB0 como entrada
 30a:	84 b1       	in	r24, 0x04	; 4
 30c:	81 70       	andi	r24, 0x01	; 1
 30e:	84 b9       	out	0x04, r24	; 4

	int contdr = 0; // Variável de contador
 310:	00 e0       	ldi	r16, 0x00	; 0
 312:	10 e0       	ldi	r17, 0x00	; 0

	while(1)
	{
		PORTB = 0x01; // Define o pino PB0 como saída e nível lógico alto
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	85 b9       	out	0x05, r24	; 5
		PORTB = (1<<PORTC0); // Define o pino PC0 como saída e nível lógico alto
 318:	85 b9       	out	0x05, r24	; 5
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 31a:	4a e0       	ldi	r20, 0x0A	; 10
 31c:	be 01       	movw	r22, r28
 31e:	6f 5f       	subi	r22, 0xFF	; 255
 320:	7f 4f       	sbci	r23, 0xFF	; 255
 322:	c8 01       	movw	r24, r16
 324:	0e 94 b4 01 	call	0x368	; 0x368 <__itoa_ncheck>

		char buffer[3];
		itoa(contdr, buffer, 10); // Converte o contador para string

		lcd_cmd(0x80); // Define o cursor na primeira linha do display LCD
 328:	80 e8       	ldi	r24, 0x80	; 128
 32a:	0e 94 96 00 	call	0x12c	; 0x12c <lcd_cmd>
		lcd_msg(buffer); // Escreve a string no display LCD
 32e:	ce 01       	movw	r24, r28
 330:	01 96       	adiw	r24, 0x01	; 1
 332:	0e 94 43 01 	call	0x286	; 0x286 <lcd_msg>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 336:	2f ef       	ldi	r18, 0xFF	; 255
 338:	80 e7       	ldi	r24, 0x70	; 112
 33a:	92 e0       	ldi	r25, 0x02	; 2
 33c:	21 50       	subi	r18, 0x01	; 1
 33e:	80 40       	sbci	r24, 0x00	; 0
 340:	90 40       	sbci	r25, 0x00	; 0
 342:	e1 f7       	brne	.-8      	; 0x33c <main+0x66>
 344:	00 c0       	rjmp	.+0      	; 0x346 <main+0x70>
 346:	00 00       	nop

		_delay_ms(100); // Aguarda 100ms

		if ((PINB & (1<<PORTB0))==1){ // Verifica se o pino PB0 está em nível lógico alto
 348:	18 9b       	sbis	0x03, 0	; 3
 34a:	08 c0       	rjmp	.+16     	; 0x35c <main+0x86>
			contdr++; // Incrementa o contador
 34c:	0f 5f       	subi	r16, 0xFF	; 255
 34e:	1f 4f       	sbci	r17, 0xFF	; 255
 350:	8f e1       	ldi	r24, 0x1F	; 31
 352:	9e e4       	ldi	r25, 0x4E	; 78
 354:	01 97       	sbiw	r24, 0x01	; 1
 356:	f1 f7       	brne	.-4      	; 0x354 <main+0x7e>
 358:	00 c0       	rjmp	.+0      	; 0x35a <main+0x84>
 35a:	00 00       	nop
			_delay_ms(10); // Aguarda 100ms
		}

		WDTCSR |= (1<<WDIE); // Habilita a interrupção do watchdog timer
 35c:	e0 e6       	ldi	r30, 0x60	; 96
 35e:	f0 e0       	ldi	r31, 0x00	; 0
 360:	80 81       	ld	r24, Z
 362:	80 64       	ori	r24, 0x40	; 64
 364:	80 83       	st	Z, r24
	}
 366:	d6 cf       	rjmp	.-84     	; 0x314 <main+0x3e>

00000368 <__itoa_ncheck>:
 368:	bb 27       	eor	r27, r27
 36a:	4a 30       	cpi	r20, 0x0A	; 10
 36c:	31 f4       	brne	.+12     	; 0x37a <__itoa_ncheck+0x12>
 36e:	99 23       	and	r25, r25
 370:	22 f4       	brpl	.+8      	; 0x37a <__itoa_ncheck+0x12>
 372:	bd e2       	ldi	r27, 0x2D	; 45
 374:	90 95       	com	r25
 376:	81 95       	neg	r24
 378:	9f 4f       	sbci	r25, 0xFF	; 255
 37a:	0c 94 c0 01 	jmp	0x380	; 0x380 <__utoa_common>

0000037e <__utoa_ncheck>:
 37e:	bb 27       	eor	r27, r27

00000380 <__utoa_common>:
 380:	fb 01       	movw	r30, r22
 382:	55 27       	eor	r21, r21
 384:	aa 27       	eor	r26, r26
 386:	88 0f       	add	r24, r24
 388:	99 1f       	adc	r25, r25
 38a:	aa 1f       	adc	r26, r26
 38c:	a4 17       	cp	r26, r20
 38e:	10 f0       	brcs	.+4      	; 0x394 <__utoa_common+0x14>
 390:	a4 1b       	sub	r26, r20
 392:	83 95       	inc	r24
 394:	50 51       	subi	r21, 0x10	; 16
 396:	b9 f7       	brne	.-18     	; 0x386 <__utoa_common+0x6>
 398:	a0 5d       	subi	r26, 0xD0	; 208
 39a:	aa 33       	cpi	r26, 0x3A	; 58
 39c:	08 f0       	brcs	.+2      	; 0x3a0 <__utoa_common+0x20>
 39e:	a9 5d       	subi	r26, 0xD9	; 217
 3a0:	a1 93       	st	Z+, r26
 3a2:	00 97       	sbiw	r24, 0x00	; 0
 3a4:	79 f7       	brne	.-34     	; 0x384 <__utoa_common+0x4>
 3a6:	b1 11       	cpse	r27, r1
 3a8:	b1 93       	st	Z+, r27
 3aa:	11 92       	st	Z+, r1
 3ac:	cb 01       	movw	r24, r22
 3ae:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <strrev>

000003b2 <strrev>:
 3b2:	dc 01       	movw	r26, r24
 3b4:	fc 01       	movw	r30, r24
 3b6:	67 2f       	mov	r22, r23
 3b8:	71 91       	ld	r23, Z+
 3ba:	77 23       	and	r23, r23
 3bc:	e1 f7       	brne	.-8      	; 0x3b6 <strrev+0x4>
 3be:	32 97       	sbiw	r30, 0x02	; 2
 3c0:	04 c0       	rjmp	.+8      	; 0x3ca <strrev+0x18>
 3c2:	7c 91       	ld	r23, X
 3c4:	6d 93       	st	X+, r22
 3c6:	70 83       	st	Z, r23
 3c8:	62 91       	ld	r22, -Z
 3ca:	ae 17       	cp	r26, r30
 3cc:	bf 07       	cpc	r27, r31
 3ce:	c8 f3       	brcs	.-14     	; 0x3c2 <strrev+0x10>
 3d0:	08 95       	ret

000003d2 <_exit>:
 3d2:	f8 94       	cli

000003d4 <__stop_program>:
 3d4:	ff cf       	rjmp	.-2      	; 0x3d4 <__stop_program>
